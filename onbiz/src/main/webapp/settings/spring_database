# spring에서 데이터베이스 연동처리
0. 프로그램과 DB 서버 접속 프로세스
	1) DB 베이스 서버 구축.
		- oracle 사이트. 11g xe 서버를 다운
			접속을 하기 위해 ip, port, sid, 계정, 비밀번호
			ip : tcp/ip기반의 특정 위치 네트워크 접속
			port : 서버의 특정 연동 통로 
				ex) 웹서버7080, 오라클:1521, 메일서버, 파일서버
		- 계정에 포함된, 2차원 테이블 기반의 데이터를 저장, 수정, 삭제
			로딩을 할 수 있다.
	2) DB client를 통해서 접속.
		- cmd창에서 sqlplus 계정/비밀번호
		- eclipse의 plugin 프로그램(dbeaver) 설치, 접속
			드라이버 관리(jdbc 드라이버)
			접속처리 (새데이터베이스 연결) 연결
			 DB 내용을 확인.
	3) 프로그래밍(spring)을 접속..
		- jdbc 드라이버를 통해 접속할 수 있다. 	
		 springweb\WebContent\WEB-INF\lib하위에 ojdbc6.jar		 	 				
	4) DB에 있는 데이터를 controller하는 실제 명령어 : sql
		ex) select * from emp, insert into 테이블명 value(입력데이터.. )
1. 기본 설정관련.
	1) db연결을 위한 jdbc driver 설정.
		cf) jdbc : java database connection
			java 프로그램으로 db 서버를 연결하기 위한 공통 모듈
			web에서 lib로 추가.
			springweb\WebContent\WEB-INF\lib\ojdbc6.jar
	2) mybatis 연결 모듈(framework).jar
			springweb\WebContent\WEB-INF\lib\
			commons-dbcp-1.2.2.jar
			mybatis-spring-1.0.2.jar
			mybatis-3.0.6.jar, 
			설정.
	3) 컨테이너(dispatcher-servlet.xml)에서 
		- dbcp(database connection pool)로 연결정보와
			jdbc 드라이버를 통해 db서버에 연동하도록 한다.
			ip, port, sid, 계정, 비밀번호
		- mybatis 연결 정보 설정.
			dbcp 연결
			mybatis의 연결의 공통 설정 파일 선언(mybatis.Spring.xml위치)
		- mybatis와 연결시, interface를 통해 mybatis가
			실제 객체를 만들어 주는데, 이 dao interface 
			폴드 위치를 선언.
				ex) EmpDao dao = new RealEmpDao();
				RealEmpDao ==> mybatis를 통해서 만들어 진 실제
				데이터 처리 결과를 포함하는 실제 객체가 인터페이스명
				으로 할당되어 service단에서 사용될 수 있다.					
	4) mybatis 공통 xml 설정파일(mybatis.Spring.xml)
		- 사용한 VO,DTO 객체를 alias이름을 선언
		- 각 DAO클래스 단위와 연결하는 XXXMapper.xml를 선언.
			ex) BoardDao(인터페이스), BoardMapper.xml
	5) XXXMapper.xml의 선언.
		- 조회, 수정, 삭제 처리하는 sql을 각 기능단위로
			선언하는 곳을 말한다.
		
2. XXXMapper.xml VS XXXDao.java의 관계
	1) 인터페이스를 통해서 Mybatis를 통해 실제 상속받은 클래스를 통해 실제 객체를 
		만들어주는 관계에 있기에 특정한 코드는 연동이 가능하게 선언해야한다
	2) 연동 규칙
		XXXDao.java									XXXMapper.xml
		interface EmpDao							<mapper namespace="패키지명.EmpDao">
		public ArrayList<Emp> empList(Emp sch)		<select 속성 = 속성값 
		
		(1) ArrayList<Emp>							resultType="emp"
		(2)	empList									id="empList"
		(3) (Emp sch)								parameterType="emp"
		
		ex) public Emp getEmp(int empno)			<select id="getEmp"
														resultType="emp"
														parameterType="int"
													
		ex) public void insertEmp(Emp ins)			<insert id="insertEmp"
														parameterType="emp"
		
		
3. sql 처리 순서 
	1) sql 작성
		결과값으로 처리할 vo의 내용 확인
		
		select * from dept;
		insert into dept values(10, '회계', '서울');
		
	2) vo 작성(조회시 결과 단위데이터를 저장할 객체)
	
	3) DAO 인터페이스 구성
		springweb\a05_mvc.a03_dao에서 구성
		
		-> 테이블 단위나 업무단위로 dao인터페이스 추가 
			ex) interface DaptDao{}
			
	4) 기능메소드 선언
		sql을 통해서 나타나는 데이터를 
		return할 객체, 조회조건 vo
		
	5) 공통 mybatis.Spring.xml
		- 사용할 vo를 alias로 선언
		- XXXMapper.xml
		
		-> 테이블 단위나 업무단위로 XXXMapper.xml을 추가하면 된다 
		
	6) XXXMapper.xml
		- 결과 객체 선언, resultMap
		- slq문 처리할 요소객체 선언
			id, 매개변수, return 값 선언
			
		(1) XXXMapper.xml : java의 Dao 인터페이스를 상속한 실제 객체를 생성해주는 역할
		(2) sql의 결과 데이터 할당 -> 객체로 할당 처리됨
		(3) Dao인터페이스가 특정한 규칙에 의해서 XXXMapper.xml의 속성과 연결처리 
	
	
	
	응용) select * from member 처리를 위해 해야할 부분 (5조 제출, 나머지 손내리기)
	
	작성한 것 (순서가 헷갈림)
	1) mybatis.Spring.xml 파일에 alias 등록
	2)  mybatis.Spring.xml 파일에 memMapper.xml 등록
	3) 해당 vo를 가져오거나 생성
	4) controller, service, dao 생성 후 해당 메소드 작성
	5) memMapper.xml 파일 생성 후 mapper의 namespace에 할당
	6) 원하는 sql문 작성
	
	
	7) 동적인 sql의 작성
	select * from dept02
	where 1=1
	and dname like '%'||#{dname}||'%'
	- dname에 값이 없을 경우
	like '%'||'null'||'%' 로 되어 
	초기에 원한 전체 검색이 처리되지 않고 데이터가 없는 겂으로 검색된다
	
	처리대안
	1) service단에서
		if(sch.getDname()==null) {
			sch.setDname("");
		}
	2) xxxmapper.xml에서
		동적인 sql을 위한 조건 처리를 한다
		where 1=1 : 전제 조건으로 1=1이 있으면 다음 sql 처리가 간편하다
	
	
	
#spring MVC를 활용한 등록/수정/삭제 
1. 초기화면 
	controller 
	view - 화면 인터페이스 구현
		form action : 프로세스 처리할 부분
		버튼 클릭시, 나타날 기본 등록 화면 
		데이터 클릭시, 나타날 상세 화면 
			1) 상세화면
			2) 수정
			3) 삭제
			
2. controller 
	등록 요청 처리 
	등록 후 리스트 화면 로딩 
	