<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  <display-name>springweb</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  <!--
  	# 스프링의 fron 컨트롤러 설정
  		1. 스프링에서 사용하는 fron controller DispatcherServlet 선언.
  		# urlpattern 기준 마지막에 @@@.do할 때 스프링을 사용하겠습니다.
  			- 웹 server 호출 처리 proc
  			1) url 호출
  				http://localhost:5080/springweb/start.do
  			2) web.xml 호출
  			3) web.xml에 설정한 내용 처리
  				- front 컨트롤러인 DispatcherServlet(스프링 프레임워크 API) 호출
  				- 컨테이너를 통해서 controller를 비롯한 여러 클래스와 내부 메서드를 urlpattern 방식으로 호출 처리하게 한다.
  				- 컨테이너 설정 부분을 호출
  					<url-pattern>*.do</url-pattern> 마지막 *.do 끝나면 front 컨트롤러 DispatcherServlet 호출하고
  					이 컨트롤러에서 선언한 container 선언 방식인 dispatcher-servlet.wml을 호출하여 처리한다.
  			4) dispatcher-servlet.xml
  				- 스프링 컨테이너
  				- 사용하고자 하는 객체를 class로 선언
  				- xml 형식으로 WAS(Web Application Server)를 수행할 때 선언된 class를 객체로 메모리에 올려지게 한다.
  				- 객체들을 특정 url pattern에 의해서 정의된 controller 호출하고 model, view(return으로 jsp등을 호출)을 사용할 수 있게 한다.
  			5) 사용자 정의 controller
  				- 지정된 url에 맞는 /start.do과 mapping되는 controller와 메서드를 호출하게 한다.
  -->
</web-app>