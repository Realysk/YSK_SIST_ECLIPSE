# 스프링 (Spring) 전체 개관
	1. 스프링의 기본처리 프로세스에 대한 이해
	
	2. 스프링의 개발 환경 설정
	
	3. 컨테이너에 대한 이해와 설정
		1) IOC
		2) DI
		3) 라이플 사이클과 범위
		4) 환경 관련 및 메시지 처리
		5) AOP
	
	4. 스프링 웹 개발
		1) 스프링 MVC 기초 (요청, 컨트롤러, 모델, 세션)
		2) 스프링 MVC 화면단 처리
		3) 스프링 MVC XML / JSON / 파일업로드 / PDF / 웹 소켓 통신
	
	5. 스프링과 DB 연동
		1) DB 연결
		2) mybatis 프레임워크 사용하기
		
	6. 기타 부가 기능
		1) 메일 발송
		2) 작업 실행과 스케줄링
	
	7. 실무 활용 예제
		0) 로그인 세션 처리
		1) 답변형 게시판 (첨부파일, 페이징처리, 무한레벨계층형 답글작성)
		2) JS 플러그인 활용하기 (AJAX 처리) / VUE 연동 처리
			- fullcalendar
			- 기타 차트 등등
		3) springboot로 답변형 게시판 작성
	
			
# 세부 사항 (누적 필기 및 추가 처리)
	1. 스프링의 기본처리 프로세스에 대한 이해
		요청 (URL과 요청값)
		=> web.xml(front컨트롤단, 컨테이너 설정) 
		=> dispatcher-servlet.xml (XXXX-servler.xml XXXX:front 컨트롤러 이름, 컨테이너 선언) 객체 로딩
		=> 위 컨테이너에 포함된 객체 안에 url요청에 의한 매핑된 메서드 호출
		=> controller : 요청값 처리, 모델 데이터 처리 (Service => DAO), 화면 (View단) 호출
		=> 최종 화면단 출력 (EL, JSTL)
		
	2. 스프링의 개발 환경 설정
		1) lib 설정
			Dynamic Web Project
				springweb\src\main\webapp\WEB-INF\lib
				직접 필요한 lib 다운로드 : https://mvnrepository.com
			Maven
				pom.xml
				<dependency>
					<groupId>org.springframework</groupId>
					<artifactId>spring-core</artifactId>
					<version>5.3.9</version>
				</dependency>
			Gradle
				build.gradle 파일에 아래 내용 선언
				implementation group: 'org.springframework', name: 'spring-core', version: '5.3.9'
			Spring Boot (Maven, Gradle)
				sts (Spring Tool Suits) 설치를 통한 설정.
		
		2) web.xml
			front 컨트롤러 선언, 컨테이너 선언, 요청값 한글 encoding filter 선언.
		
		3) 컨테이너 파일 설정
			Controller, Service, Dao 등록
			View단 등록
			기타 필요한 lib나 사용자 정의 클래스 선언을 통해 자동 객체 생성
	
	3. 컨테이너에 대한 이해와 설정
		0) web.xml에서 여러가지 url형태에 따른 컨테이너 파일 설정
		1) IOC : 제어 역전
		2) DI/DL
		3) 라이플 사이클과 범위 : 컨테이너 안에 선언된 빈 객체들의 생성과 소멸 참조
		4) 환경 관련 및 메시지 처리 : 외부 설정파일 및 다국어 처리를 위한 메시지 처리, 중요 공통 정보 설정.
		5) AOP : Aspect oriented Programming 문제를 바라보는 관점을 기준으로 프로그래밍하는 기법
			
	
	4. 스프링 웹 개발
		1) 스프링 MVC 기초 (컨트롤러 (요청, 모델, 뷰 호출) 세션)
			public String 메서드명(@RequestParam("요청key") String value, Model d) {}
			public String 메서드명(요청값을받는객체 참조변수, Model d) {}
			public String regMember(Member mem, Model d) {}
			요청 처리
				url get/post
				요청값 (key=value)
			모델 (Model)
				요청 + Model : 매개변수 modelattribute @ModelAttribute
				컨트롤단에 공통된 모델 : modelattribute
					ex) 사원정보 Controller - 전체조회, 등록, 상세조회, 수정, 삭제
			View단 호출
				redirect 방식 화면 호출
				forward 방식 화면 호출
				ModelAndView (모델+View) 같은 객체에서 처리
			
		2) 스프링 MVC 화면단 처리 (View)
			JSP 화면 호출, 기타 View lib에 의한 화면 호출
				컨테이너에서 선언한 viewresolver를 처리하여 화면으로 호출한다.
					(1) default
						컨트롤러의 메서드의 최종 문자열 return값을 jsp파일로 View를 인식
					(2) 여러가지 View (ex - 파일 다운로드/업로드, Json, PDF, Excel, 소켓통신 등등) 을 처리하기 위해서 특정한 View를 Bean으로 설정하고,
						기본적인 화면처리하는 View를 선택적으로 처리하기 위해 Bean을 처리하는 View Resolber를 등록하여 우선 순위를 지정하여 처리하고자 한다.
						ex) 핸드폰 사진/동영상 촬영
							웹 프로그램 화면구현 HTML을 처리하는 방식 / 그 외 여러가지 형태 (bean)
							파란색 구슬 8 / 빨간색 구슬 2
							경우의 수가 적은 것에 대한 처리를 우선순위로 하고, 그 외는 다 경우의 수가 많은 것에 대한 처리.
					(3) 특정한 View에 대한 우선 순위를 지정하는 viewResolver를 선언
						경우의 수가 적은 JSP View 이외의 View를 bean으로 등록했을 때 그 이름을 호출할 때는 bean 먼저 처리
						그 외는 모두 다 JSP View로 인식하여 처리한다.
					(4) 각각의 필요한 viewResolver를 선언
					
			Spring의 태그 lib 화면 - form 화면 처리를 효과적으로 할 수 있다. (Controller의 modelattribute 연동)
			WAS의 기준 유효성 check, error 처리
		
		3) 스프링 MVC XML / JSON / 파일업로드 / 파일다운로드 / PDF / 웹 소켓 통신
			viewresolver를 컨테이너(dispatcher-servlet)에서 선언을 통해 효과적인 View단 처리를 할 수 있다. 
	
	
	5. 스프링과 DB 연동
		1) DB 연결 : connection pool 설정과 DB 연결 처리 (컨테이너)
		
		2) mybatis 프레임워크 사용하기
			- 컨테이너에 프레임워크 호출
			- 공통 mybatis 설정파일 호출
			- SQL을 처리할 mapper.xml 선언과 활용
			- DAO단 연동을 위한 처리방식 : interface + xml
		
	6. 기타 부가 기능
		1) 메일 발송 : 자동 메일 발송 ex) 회원 비밀번호 분실 시 등록된 메일로 발송, 회사인사정보 시스템 사원정보 전달
		2) 작업 실행과 스케줄링 ex) 스프링에서는 WAS 단위 특정한 시간과 간격으로 특정 프로그래밍을 반복적으로 수행 처리할 수 있다.
	
	7. 실무 활용 예제
		0) 로그인 세션 처리
		1) 답변형 게시판 (첨부파일, 페이징처리, 무한레벨계층형 답글작성)
		2) JS 플러그인 활용하기 (AJAX 처리) / VUE 연동 처리
			- fullcalendar
			- 기타 차트 등등
		3) springboot로 답변형 게시판 작성
		4) 웹 소켓을 통한 상호간의 실시간 채팅
		
# MVC 패턴에 의한 DB 연결된 화면 개발
	0. 요구사항 내용에 의해 화면에서 전달할 요청값과 DB 처리 및 SQL 구문 확정
	1. DB 처리 - DAO
	2. Service단 처리
	3. Controller에서 초기 화면 호출
		1) 요청값 처리 내용 확인
		2) Service단에 데이터 로딩 및 모델 데이터 처리
	4. 화면단에서 JSTL/EL을 통한 모델 데이터 처리

# CRUD 처리 구현
	1. View - 화면 User Interface 결정
		ex) 등록 버튼 추가 (화면)
			등록 클릭 시 (JS)
			등록할 화면 출력 (Modal)
			등록값 입력 후 Submit 처리 : form의 action 속성 변경
			등록 처리할 Controller 호출
			Controller
				URL Mapping
					요청값 매개변수로 처리
					DAO/Mapper 구현
					Service단 DAO 호출
					Control 단, Service 단에 등록 데이터 전송
					return ""; 최종 호출할 화면 선언. ex) return "redirect:/deptList.do"
	
# Spring MVC를 활용한 CRUD
	1. 초기화면 구현
		Controller
		View - 화면 Interface 구현
			form action : 프로세스 처리할 부분
			버튼 클릭 시, 나타날 기본 등록 화면
			데이터 클릭 시, 나타날 상세 화면
				상세화면
					수정
					삭제
	2. Controller
		등록 요청 처리
		등록 후, 리스트 화면 로딩
		
# 환경관련 및 메시지 처리
	1) 프로그래밍에 있어서, 개발 서버 정보 (DB서버, File서버 등)나 공통 설정 정보(계정/비번 주요 메시지 등)에 대한 내용을
		따로 파일을 이용해서 등록하여 해당 파일의 내용만 변경되어도 전체 각 소스별로 지정한 정보로 변경되면 효과적으로 처리할 수 있다.
		ex) 파일 서버 위치 정보
	2) 설정 방법
		(1) classpath로 잡힌 resource 하위에 특정한 text 파일을 생성.
		(2) 해당 text 파일에 공통적인 정보를 설정. key = value 형식으로 지정.
		(3) 컨테이너에서 해당 정보가 있는 파일을 context:property-placeholder로 호출
		(4) 컨테이너에서는 ${설정키} : 해당 값을 가져오게 한다.
		(5) JAVA의 소스
			@Value("${설정키}")
			private String 변수명; // 위에 설정된 키의 값을 변수에 할당