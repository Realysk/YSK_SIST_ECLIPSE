# Spring DATABASE
	1. 기본 설정 관련
		1) DB 연결을 위한 JDBC Driver 설정
			cf) JDBC : java database connection
						java 프로그램으로 DB 서버를 연결하기 위한 공통 모듈 (web에서 lib로 추가)
						springweb\webapp\WEB-INF\lib\ojdbc6.jar
		2) mybatis 연결 모듈(framework).jar
			springweb\webapp\WEB-INF\lib\
				commons-dbcp-1.2.2.jar
				mybatis-spring-1.0.2.jar
				mybatis-3.0.6.jar
				설정
		3) 컨테이너(dispatcher-servlet.xml)
			- DBCP (Database Connection Pool)로 연결정보와 jdbc 드라이버를 통해 DB서버에 연동하도록 한다.
				IP, PORT, SID, 계정, 비밀번호
			- mybatis 연결 정보 설정
				DBCP 연결
				mybatis와 연결 시, interface를 통해 mybatis가 실제 객체를 만들어 주는데, 이 DAO Interface 폴드 위치를 선언
					ex) EmpDao dao = new RealEmpDao();
						RealEmpDao => mybatis를 통해서 만들어진 실제 데이터 처리 결과를 포함하는 실제 객체가 인터페이스명으로 할당되어 service단에서 사용될 수 있다.
		4) mybatis 공통 xml 설정파일 (mybatis.Spring.xml)
			- 사용한 VO, DTO 객체를 alias 이름을 선언
			- 각 DAO 클래스 단위와 연결하는 XXXMapper.xml를 선언.
				ex) BoardDao(인터페이스), BoardMapper.xml
		5) XXXMapper.xml의 선언
			- 조회, 수정, 삭제 처리하는 SQL을 각 기능단위로 선언하는 것을 말한다.
			
	2. XXXMapper.xml VS. XXXDao.java의 관계
		1) 인터페이스를 통해서 MYBATIS를 톨해 실제 상속받은 클래스를 통해 실제 객체를 만들어주는 관계에 있기에 특정한 코드는 연동이 가능하게 선언해야 한다.
		2) 연동 규칙
			[XXXDao.java]											[XXXMapper.xml]
			
			interface EmpDao									<mapper namespace="패키지명.EmpDao">
			public ArrayList<Emp> empList(Emp sch)				<select 속성=속성값
				(1) ArrayList<Emp>									resultType="emp"
				(2) empList											id="empList"
				(3) (Emp sch)										parameterType="emp"
		
		ex) public Emp getEmp(int empno)						<select id="getEmp"
																	resultType="emp"
																	parameterType="int"														
		
		ex) public void insertEmp(Emp ins)						<insert id="insertEmp"
																	parameterType="emp"
																	
	3. SQL 처리 순서
		1) SQL 작성
			결과값으로 처리할 VO의 내용 확인
				SELECT * FROM dept;
				INSERT INTO dept VALUES(10, '회계', '서울');
		2) VO 작성 (조회 시, 결과 단위데이터를 저장할 객체)
		3) DAO 인터페이스 구성
			springweb.a05.mvc.a03_dao에서 구성.
				테이블 단위나 업무 단위로 Dao 인터페이스 추가
				interface
		4) 기능 메서드 선언
			SQL을 통해서 나타나는 데이터를 return할 객체, 조회조건 VO
		5) 공통 mybatis.Spring.xml
			- 사용할 VO를 alias로 선언
			- XXXMapper.xml
				테이블 단위나 업무단위로 XXXMapper.xml을 추가하면 된다.
		6) XXXMapper.xml
			- 결과 객체 선언. resultMap
			- SQL문 처리할 요소객체 선언
				- ID, 매개변수, return값 선언
			1. JAVA의 DAO 인터페이스 상속한 실제 객체를 생성해주는 역할을 하는 것이 XXXMapper.xml
			2. SQL의 결과 데이터 => 객체로 할당 처리
			3. DAO 인터페이스가 특정한 규칙에 의해서 XXXMapper.xml의 속성과 연결처리
	
		7) 동적인 SQL의 작성
			SELECT * FROM dept02
			WHERE 1=1
			AND dname LIKE '%'||#{dname}||'%'
			dname에 값이 없을 경우
			AND dname LIKE '%'||'null'||'%'로 되어,
			초기에 원한 전체 검색이 처리 되지 않고, 데이터가 없는 것으로 검색된다.
			(1) Service단에서
				if(sch.getDname()==null) {
					sch.setDname("");
				}
			(2) XXXMapper.xml에서
				동적인 SQL을 위한 조건 처리를 한다.
				WHERE 1=1 : 전제 조건으로 1=1이 있으면 다음 SQL을 처리가 간편하다.
				<if test="dname != null AND dname !=''">
					AND dname LIKE '%'||#{dname}||'%'
				</if>
				dname이 null이 아니고, ''(공백)이 아닐 때
			