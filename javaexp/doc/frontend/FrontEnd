# FrontEnd #

	1. 웹에서 client 파트의 프로그램을 처리하는 것을 말한다.
	
	2. 순서
		1) 환경 설정
			- 웹 encoding 처리
			- 웹 서버 연동 화면 출력
		2) 전체적인 knowledgeMap 정리
	
	3. HTML
		0) HTML => CSS 						=> Javascript
			=> Bootstrap					=> jquery
			=> Bootstrap template			=> jsp 수업 후, ajax
											=> vue
						
		1) .html의 구성요소
			- html 태그
			- css : html에 상단에 포함하거나, .css 파일로 외부파일로 저장한 후, 호출하여 처리한다.
			- javascript : .js파일로 외부파일 호출 처리. head, body 중간에 제일 하단에 <script>코드로 처리한다.
			
		2) HTML 기본
			- 타이틀 h1~h6
			- 문단 paragraph
			- Text 꾸미기 태그 : 진하게, 강조, 삭제, 추가, 위/아래첨자
				<b><del>..<insert>...
			- 블럭 태그 : 태그가 줄 바꿈 포함 (h1, div)
			- 인라인 태그 : 줄 바꿈 없이 한 라인으로 명령 처리 (span, img)
			- 이미지 처리 : img src(이미지의 파일명), width(넓이), height(높이)
			- List 처리 : <ul><li>, <ol><li>
			- Table : 화면에 출력 할 2차원의 데이터를 표현할 때 주로 사용된다.
					  타이틀, 내용을 효과적으로 정렬해서 처리한다.
					<table>
						<tr><th> 테이블의 타이틀 <th></tr>
						<tr><td> 데이터 <td></tr>
					</table>
			- Link : 외부 문서나 내부 문서에 연결하여 처리한다.
					 <a href = ""> : 특정한 메뉴나 기능을 클릭 시, 해당 페이지로 이동 처리.
					- Download 처리
			- 화면 구분 처리
				div
				frame
				iframe : 외부/내부 페이지를 호출하여 사용할 때 활용된다.
				위에 hyperlink와 연동하여 메뉴별 페이지 이동을 처리한다.
				HTML5 Semantic 태그 처리 : 화면구분
			- Form 하위의 여러 요소 객체를 사용.
				<input type = "text"> 데이터를 입력해서 서버에 전송할 때 주로 활용된다.
				<input type = "checkbox"> check 멀티 선택
				<input type = "radio"> check 단일 선택
				<input type = "submit"> 서버에 전송할 때, 사용되는 버튼
				<input type = "button"> 기본 화면에서 출력할 버튼
				<select> 콤보로 선택할 때.
				<textarea> 여러 라인으로 데이터 입력 시.
					
	4. CSS
		기본 HTML을 바탕으로 크기나 모양 색상으로 효과적으로 처리해준다.
		CSS3 동적인 처리 가능하고 3D 모양의 기능 처리.
		1) 선언 방법
			- inline
				해당 태그에만 바로 적용 처리
				<태그 style="속성:속성값...."/>
				ex) <h2 style="background-color:yellow"/>
			- head 부분에 선언
				body에 있는 해당 선택자의 모든 내용에 선언된 내용으로 적용.
				선택자{속성1:속성값1; 속성2:속성값2....}
				ex) h2{background-color:yellow;}
		2) 선택자 selector
			- body 안에 선언된 태그들을 기본적으로 선택해서 속성으로 색상, 굵기, 크기, 이벤트등을 처리.
			- #아이디속성{}, .클래스속성{}, 기본태그{속성:속성값;}
				<h3 class="cls01"/>
				<h3 class="cls01"/>
				ex) .cls01{color:blue;}
				<h4 id="id01"/> 해당화면에 유일식별자..
				ex) #id01{border:1px solid red;}
			- [속성 = 속성값]{}
			- :{} - 가상선택자
		3) 여러가지 속성들
			- margin : 여백
			- color : 글자색
			- text-XXX : 텍스트 관련 속성
			- font-XXX : 문자체에 대한 속성
			- box관련 속성 : margin, border, padding, contents
			- css3 속성 : border-radius
			- background-XXX : 배경 관련 속성
			- 줄 바꿈 관련 속성 : display - block, inline, inline, inline-block
			- 위치 관련 속성 : position
			- visibility
			- overflow
			
	5. Java Script
		위에 html을 통해서 선언 된 화면의 구성 요소들에 함수나 객체화를 통해서 동적인 처리(event)를 하고자 한다.
		위 내용을 처리하기 위하여 기본적인 프로그래밍 기술과 이해를 바탕으로 한다.
	
		1) javascript의 선언과 로딩 되는 위치
		2) 기본 문법
			- 변수 선언 규칙 : 데이터 유형이 초기에 선언되지 않는다.
				var var01 = 25; // 데이터를 할당하는 순간 해당 변수의 데이터 유형이 결정된다.
				// js의 데이터 유형 : 숫자형, 문자열형, boolean, 함수형, 객체형(배열포함)
			- 데이터 할당
			- 주석 처리
			- 출력 형식 : alert, document.write, console.log("");
			- 입력 형식 : prompt, confirm
			- 기타 프로그램 기초 : 연산자 종류
			- 형 변환
		3) 조건 / 반복문
			- if, for
				var arr=["사과","바나나","딸기"];
				var obj={name:"홍길동",age:25,loc:"서울신림"};
				// java와 차이가 있음.
				for (var idx1 in arry) {
					// idx : 데이터 유형도 문자열을 index값을 받는다. '0', '1', '2'
					arry[idx1] : 각 단위 데이터 "사과", "바나나"..
				}
				for(var prop1 in obj) {
					// prop1 : 문자열 "name", "age", "loc"
					obj[prop1] : 속성값을 가져온다. "홍길동", 25, "서울신림동"
				}
				for(var idx=0;idx<arry.length;idx++){}
			- switch
			- 삼항연산자
		4) 함수 처리
			- 선언적 함수
				function 함수명() {
					함수 호출 처리
				}
			- 변수형 함수
				var 함수명 = function(){};
			- 내장 함수
				setInterval, setTimeout : 반복적인 데이터 기능 처리
				Number(), paresInt(), parseFloat() : 문자열이나 데이터 유형의 형 변환 처리
		5) 객체
			- 생성자형 객체
				function 객체명() { -- 함수와 구분하기 위해 대문자로 시작
					this.속성 = 속성값;
					this.속성 = 속성값;
					this.속성 = function(){
					}				
				}
				var p01 = new 객체명();
				p01.속성; // 일반 필드
				p01.속성(); // 메서드
			- json (javascript object notation)
				var p02 = {속성:속성값, 속성:function(){}}
				p02.속성;
				p02.속성();
			- class 클래스명 { - ecam6 이후 버전 지원 }
			- 내장 객체
				String : split(), substring()
				# Date : 날짜 처리
				Array : 배열에서 처리되는 내용 지원
				Math : 올림, 반올림, 내림, 랜덤 (JAVA와 동일)
		6) DOM (Document Object Model) : 웹 프로그래밍에서 핵심 ***
			- 화면에서 구현 된 태그들을 객체화하여 속성을 변경하거나 메서드를 처리하여 동적인 화면구현을 처리한다.
			- 대상 객체 지정 형식
				var obj = document.querySelector("선택자");
				var arry = document.querySelectorAll("선택자");
				# 선택자 (css 선택자와 동일하게 적용)
					1) 태그
					2) #아이디명
					3) .클래스명
					----------
					4) [속성=속성값] <input name="id"/>
						var idObj = document.querySelector("[name=id]");
						idObj.value;
						
		7) BOM (Browser Object Model)
			- 브라우저를 클릭 시, 로딩 되는 브라우저 전체 화면을 객체화하여 처리할 때 사용된다.
			- var win01 = window.open("소스(파일명)","","옵션");
				옵션 : 브라우저의 크기, 타이틀, status 등..
			- 기능 : resizeBy(), moveBy(), moveTo()...
		8) 이벤트 처리
			- 대상 객체 : DOM 지정
			- 이벤트 함수 선언 : 이벤트를 통해서 수행 할 내용을 함수로 정의 하는 것을 말한다.
			- 이벤트 처리 : 이벤트 즉 클릭, 마우스 오버, 마우스 아웃, Key 입력
			
			사람 (대상객체)
			속성 듣기 (이벤트)
			듣고 나서 처리한 내용 (이벤트핸들러함수)
			function call(){}
			<h2 onclick="call()"> 클릭 </h2>
			
			var h1Obj = document.querySelector("h1");
			h1Obj.onclick = function() {
				// 익명함수에 의해서 처리될 내용 기술
			};
		9) 예외처리
			try {
				예외가 날만한 코드
			} catch(exception) {
				예외가 발생했을 때 처리할 코드
			} finally {
				예외발생/발생하지 않더라도 처리할 코드
			}
		10) 기타 유틸리티
			- 정규표현식 : frontend단에서 유형성 check시 많이 활용되는 표현방식을 의미한다.
				1. 코드방식
					new RegExp('text')
					/text/
				2. 정규 표현식 객체 메서드
					test() : 일치하는 문자열이 있으면 true/false
					exec() : 일치하는 문자열 자체
				3. String 객체 메서드
					match(정규표현식) : 일치부분
					replace(정규표현식, 바꿀내용) : 일치부분을 새로운 문자열로 변경
					search(정규표현식) : 일치부분 위치
					split(정규표현식) : 문자열을 잘라 배열 패턴으로 처리
			- 구글 맵 API 활용하기
			- 브라우저 저장소 Cookie